package tictactoe;

import java.util.Scanner;

public class Main {

    private static final Scanner SCANNER = new Scanner(System.in);

    private static void drawGrid(String input) {

        int partSize = 3;

        System.out.println("---------");
        for (int i = 0; i < input.length(); i++) {
            if (i != 0 && i % partSize == 0) {
                System.out.println("|");
            }
            if (i == input.length() - 1) {
                System.out.print(input.charAt(i) + " |");
            } else if (i % partSize == 0) {
                System.out.print("| " + input.charAt(i) + " ");
            } else {
                System.out.print(input.charAt(i) + " ");
            }
        }
        System.out.println("\n---------");
    }

    private static boolean isImpossibleQuantityOfSigns(String input) {

        int countX = 0;
        int countO = 0;

        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == 'X') {
                countX++;
            }
            if (input.charAt(i) == 'O') {
                countO++;
            }
        }
        return countO - countX > 1 || countO - countX < -1;
    }

    private static boolean isAWinner(String input, char sign) {

        if (input.charAt(0) == sign && input.charAt(1) == sign && input.charAt(2) == sign) {
            return true;
        }  else if (input.charAt(3) == sign && input.charAt(4) == sign && input.charAt(5) == sign) {
            return true;
        } else if (input.charAt(6) == sign && input.charAt(7) == sign && input.charAt(8) == sign) {
            return true;
        } else if (input.charAt(0) == sign && input.charAt(4) == sign && input.charAt(8) == sign) {
            return true;
        } else if (input.charAt(2) == sign && input.charAt(4) == sign && input.charAt(6) == sign) {
            return true;
        } else if (input.charAt(0) == sign && input.charAt(3) == sign && input.charAt(6) == sign) {
            return true;
        } else if (input.charAt(1) == sign && input.charAt(4) == sign && input.charAt(7) == sign) {
            return true;
        } else {
            return input.charAt(2) == sign && input.charAt(5) == sign && input.charAt(8) == sign;
        }
    }

    private static boolean isBoardFull(String input) {

        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == ' ' || input.charAt(i) == '_') {
                return false;
            }
        }
        return true;
    }

    private static String analyze(String input) {

        if (isImpossibleQuantityOfSigns(input) || isAWinner(input, 'X') && isAWinner(input, 'O')) {
            return "Impossible";
        } else if (isAWinner(input, 'X')) {
            return "X wins";
        } else if (isAWinner(input, 'O')) {
            return "O wins";
        } else if (isBoardFull(input)) {
            return "Draw";
        } else {
            return "Game not finished";
        }
    }

    private static char[][] fromStringToArray(String input) {

        char[][] grid = new char[3][3];
        int temp = 0;

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                grid[i][j] = input.charAt(temp++);
            }
        }
        return grid;
    }

    private static boolean validateMove(char[][] grid, String moveX, String moveY) {

        int x = Integer.parseInt(moveX);
        int y = Integer.parseInt(moveY);

        if (x < 1 || x > 3 || y < 1 || y > 3) {
            System.out.println("Coordinates should be from 1 to 3!");
            return false;
        }
        if (grid[x - 1][y - 1] == 'X' || grid[x - 1][y - 1] == 'O') {
            System.out.println("This cell is occupied! Choose another one!");
            return false;
        }
        return true;
    }

    private static boolean isANumber(String str) {

        try {
            Integer.parseInt(str);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    private static String playerMove(char[][] grid, String moveX, String moveY) {

        int x = Integer.parseInt(moveX);
        int y = Integer.parseInt(moveY);

        grid[x - 1][y - 1] = 'X';
        StringBuilder stringBuilder = new StringBuilder();
        for (char[] chars : grid) {
            for (char aChar : chars) {
                stringBuilder.append(aChar);
            }
        }

        return stringBuilder.toString();
    }

    public static void main(String[] args) {

        System.out.print("Enter cells: ");
        String input = SCANNER.next();
        boolean flag = false;

        drawGrid(input.toUpperCase());
        String moveX;
        String moveY = "";

        do {
            System.out.print("Enter the coordinates: ");
            moveX = SCANNER.next();
            if (!isANumber(moveX)) {
                System.out.println("You should enter numbers!");
                SCANNER.nextLine();
                continue;
            }
            moveY = SCANNER.next();
            if (!isANumber(moveY)) {
                System.out.println("You should enter numbers!");
                continue;
            }
            flag = true;
        } while (!flag);

        while (!validateMove(fromStringToArray(input), moveX, moveY)) {
            System.out.print("Enter the coordinates: ");
            moveX = SCANNER.next();
            moveY = SCANNER.next();
        }
        drawGrid(playerMove(fromStringToArray(input), moveX, moveY));

        //System.out.println(analyze(input.toUpperCase()));
    }
}
